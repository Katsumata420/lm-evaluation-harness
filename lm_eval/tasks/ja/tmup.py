"""
TMUP: Tokyo Metropolitan University Paraphrase Dataset
https://aclanthology.org/P17-3007/

PAWS-X と同様のプロンプトを使用しています。
Prompt format (same as in mGPT):

"<s>" + sentence1 + ", right? " + mask + ", " + sentence2 + "</s>",

where mask is the string that matches the label:

Yes, No.

Example:

<s> 私の父は非常に強い男でした。, ですね? はい, 父はとても強い男だった。</s>

Homepage: https://github.com/tmu-nlp/paraphrase-corpus
"""
from lm_eval.base import Task, rf
from lm_eval.metrics import mean
from lm_eval import utils

_CITATION = """
@inproceedings{,
    author      = {Suzuki, Yui and Kajiwara, Tomoyuki and Komachi, Mamoru},
    title       = {Building a Non-Trivial Paraphrase Corpus
                  using Multiple Machine Translation Systems},
    booktitle   = {Proceedings of ACL 2017 Student Research Workshop},
    month       = {July},
    year        = {2017},
    address     = {Vancouver, Canada},
    publisher   = {Association for Computational Linguistics},
    pages     = {(to appear)},
    url       = {http://www.aclweb.org/anthology/}
}
"""


class TMUPPaws(Task):
    VERSION = 1.0
    PROMPT_VERSION = 0.0
    DATASET_PATH = "retrieva-jp/TMUP"
    DATASET_NAME = None

    YES = "はい"
    NO = "いいえ"
    QUESTION_WORD = "ですね"

    def has_training_docs(self):
        return False

    def has_validation_docs(self):
        return False

    def has_test_docs(self):
        return True

    def test_docs(self):
        return map(self._process_doc, self.dataset["test"])

    def _process_doc(self, doc):
        """Detokenize the document"""
        return {
            "sentence1": "".join(doc["sentence_A_ja"].split()),
            "sentence2": "".join(doc["sentence_B_ja"].split()),
            "label": int(doc["label"]),
        }

    def doc_to_text(self, doc):
        # same as in mGPT paper
        return (
            doc["sentence1"]
            + ", "
            + self.QUESTION_WORD
            + "? [MASK], "
            + doc["sentence2"]
        )

    def doc_to_target(self, doc):
        return " " + [self.YES, self.NO][doc["label"]]

    def doc_to_fewshot_prompt(self, doc):

        prompt = self.doc_to_text(doc)
        return prompt.replace("[MASK]", self.doc_to_target(doc)[1:])

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or
            test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """

        ll_yes = rf.loglikelihood_rolling(ctx.replace("[MASK]", self.YES))
        ll_no = rf.loglikelihood_rolling(ctx.replace("[MASK]", self.NO))

        return ll_yes, ll_no

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        ll_yes, ll_no = results

        pred = ll_yes > ll_no

        true_label = doc["label"]

        return {
            "acc": pred == true_label,
        }

    def aggregation(self):
        """
        :returns: {str: [metric_score] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metric scores
        """
        return {
            "acc": mean,
        }

    def higher_is_better(self):
        return {"acc": True}

    @utils.positional_deprecated
    def fewshot_context(
        self, doc, num_fewshot, provide_description=None, rnd=None, description=None
    ):
        """Returns a fewshot context string that is made up of a prepended description
        (if provided), the `num_fewshot` number of examples, and an appended prompt example.

        :param doc: str
            The document as returned from training_docs, validation_docs, or test_docs.
        :param num_fewshot: int
            The number of fewshot examples to provide in the returned context string.
        :param provide_description: bool
            Not implemented, and this option is deprecated and will be removed in a future version in favor of a different description providing method
        :param rnd: random.Random
            The pseudo-random number generator used to randomly sample examples.
            WARNING: This is currently a required arg although it's optionalized with a default `None`.
        :param description: str
            The task's description that will be prepended to the fewshot examples.
        :returns: str
            The fewshot context.
        """
        assert (
            rnd is not None
        ), "A `random.Random` generator argument must be provided to `rnd`"
        assert not provide_description, (
            "The `provide_description` arg will be removed in future versions. To prepend "
            "a custom description to the context, supply the corresponding string via the "
            "`description` arg."
        )
        if provide_description is not None:
            # nudge people to not specify it at all
            print(
                "WARNING: provide_description is deprecated and will be removed in a future version in favor of description_dict"
            )

        description = description + "\n\n" if description else ""

        if num_fewshot == 0:
            labeled_examples = ""
        else:
            # for sets with no training docs, draw from other set *but ensure no overlap with current doc*
            if self.has_training_docs():
                fewshotex = self.fewshot_examples(k=num_fewshot, rnd=rnd)
            else:
                if self._fewshot_docs is None:
                    self._fewshot_docs = list(
                        self.validation_docs()
                        if self.has_validation_docs()
                        else self.test_docs()
                    )

                fewshotex = rnd.sample(self._fewshot_docs, num_fewshot + 1)

                # get rid of the doc that's the one we're evaluating, if it's in the fewshot
                fewshotex = [x for x in fewshotex if x != doc][:num_fewshot]

            labeled_examples = (
                "\n\n".join(
                    [
                        # self.doc_to_text(doc) + self.doc_to_target(doc)
                        self.doc_to_fewshot_prompt(doc)
                        for doc in fewshotex
                    ]
                )
                + "\n\n"
            )

        example = self.doc_to_text(doc)
        return description + labeled_examples + example


VERSIONS = [
    TMUPPaws,
]


def construct_tasks():
    tasks = {}
    for version_class in VERSIONS:
        tasks[f"tmup-{version_class.VERSION}-{version_class.PROMPT_VERSION}"] = version_class
    return tasks
